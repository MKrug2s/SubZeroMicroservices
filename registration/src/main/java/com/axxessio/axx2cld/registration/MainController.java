package com.axxessio.axx2cld.registration;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


@Controller // This means that this class is a Controller
//@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private PersonRepository userRepository;
  @Autowired
  private AdresseRepository adresseRepository;
  @Autowired
  private KontaktRepository kontaktRepository;
  @Autowired
  private AccountRepository accountRepository;
  

  @PostMapping(path="/person") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (@RequestParam String anrede, @RequestParam String nachname,@RequestParam String vorname,
		  @RequestParam String email, @RequestParam String password, @RequestParam String str, 
		  @RequestParam int hausnummer, @RequestParam int plz, @RequestParam String ort,  
		  @RequestParam String name,  @RequestParam Integer telefon) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    Person n = new Person();
    n.setAnrede(anrede);
    n.setVorname(vorname);
    n.setNachname(nachname);
   
   
    Adresse a = new Adresse();
    a.setStr(str);
    a.setHausnummer(hausnummer);
    a.setPlz(plz);
    a.setOrt(ort);
    
    Kontakt k = new Kontakt();
    k.setEmail(email);
    k.setTelefon(telefon);
    
    Account acc = new Account();
    acc.setName(name);
    acc.setPassword(password);
    
    userRepository.save(n);
    adresseRepository.save(a);
    kontaktRepository.save(k);
    accountRepository.save(acc);
    return "Saved";
    
  }

  @GetMapping(path="/person")
  public @ResponseBody Iterable<Person> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }
  @GetMapping(path="/adresse")
  public @ResponseBody Iterable<Adresse> getAllAddress() {
    // This returns a JSON or XML with the users
    return adresseRepository.findAll();
  }
  @GetMapping(path="/kontakt")
  public @ResponseBody Iterable<Kontakt> getAllKontakt() {
    // This returns a JSON or XML with the users
    return kontaktRepository.findAll();
  }
  @GetMapping(path="/account")
  public @ResponseBody Iterable<Account> getAllAccount() {
    // This returns a JSON or XML with the users
    return accountRepository.findAll();
  }
  
  
}
